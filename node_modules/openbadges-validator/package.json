{
  "name": "openbadges-validator",
  "version": "0.2.4",
  "description": "openbadges validation tools",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "dateutil": "~0.1.0",
    "dataurl": "~0.1.0",
    "request": "~2.14.0",
    "async": "~0.2.5",
    "jws": "0.2.2",
    "deep-equal": "0.0.0"
  },
  "devDependencies": {
    "nock": "~0.22.1",
    "tap": "~0.4.0",
    "underscore": "~1.5.1",
    "sinon": "~1.7.3",
    "jake": "~0.6.11",
    "cover": "0.2.9"
  },
  "engines": {
    "node": "~0.10.0"
  },
  "scripts": {
    "test": "node node_modules/tap/bin/tap test/*.test.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mozilla/openbadges-validator.git"
  },
  "keywords": [
    "openbadges",
    "validation"
  ],
  "author": {
    "name": "Brian J. Brennan"
  },
  "license": "MPL 2.0",
  "readmeFilename": "README.md",
  "gitHead": "898ea511952e2eda151e484c0b074164139bbe3e",
  "readme": "# OpenBadges Validator Tools [![Build Status](https://secure.travis-ci.org/mozilla/openbadges-validator.png?branch=master)](http://travis-ci.org/mozilla/openbadges-validator)\n\n# Installing\n\n```bash\n$ npm install openbadges-validator\n```\n\n# Usage\n\nThe following documentation assumes the module has been imported\nlike so:\n\n```javascript\nvar validator = require('openbadges-validator');\n```\n\n## validator(thing, callback)\n\nValidate a badge assertion and return an object containing info about\nthe validated assertion.\n\n`thing` should be an assertion, URL for a hosted assertion, or a signed badge.\n\nThe callback is passed two arguments, `(err, info)`.\n\n`info` is an object containing the following properties:\n\n- `version`: Version of the specification that the analyzed assertion\n  corresponds to. Currently this will be either \"1.0.0\" or \"0.5.0\".\n\n- `guid`: The GUID of the assertion, as per the algorithm described in\n  the documentation for `getAssertionGUID`. If the assertion passed-in\n  was the literal object for a 0.5.0-style assertion, this will be\n  `null`, since there is no way to know what the URL of the assertion\n  is.\n\n- `signature`: JSON Web Signature representation of the assertion. This\n  will only be present if the assertion came in as a JWS.\n\n- `structures`\n  - `assertion`: The assertion data\n  - `badge`: Badge data related to assertion.\n  - `issuer`: Issuer data related to badge.\n\n- `resources`: Object with all of the resources related to the\n  assertion, badge and issuer. A list of the possible properties follows\n  (properties marked with a star are guaranteed to exist. **NOTE**,\n  property names are the literal dotted strings, not deep property\n  lookups, i.e, `resources['assertion.image']`.\n  - `assertion.image`\n  - `assertion.verify.url`\n  - `assertion.evidence`\n  - `badge.criteria`★\n  - `badge.image`★\n  - `issuer.url`\n  - `issuer.image`\n  - `issuer.revocationList`\n\n## validator.validateHosted(assertion, callback)\n## validator.validateHostedUrl(url, callback)\n## validator.validateSigned(signature, callback)\n\nThe methods underlying `validator(thing, callback)` can also be called\ndirectly to validate a specific type of input. \n\n## validator.getAssertionGUID(urlOrSignature, callback)\n\nGiven either a hosted assertion URL or a signed assertion,\nreturn an alphanumeric string that uniquely identifies the badge.\n\nThe callback is passed two arguments, `(err, guid)`.\n\nIf the assertion is hosted, `guid` will be the SHA256 hash of the following \nstring:\n\n`hosted:` **assertion URL**\n\nIf the assertion is signed, `guid` will be the SHA256 hash of the following\nstring:\n\n`signed:` **assertion UID** `:` **origin of assertion's public key**\n\nFor example, if the signed assertion's public key is hosted at\n`https://example.org/public-key` and the assertion's UID is `abcd`, then\nthe assertion's GUID will be the hex-encoded SHA256 hash of\n`signed:abcd:https://example.org`, or\n`61ae9c039ecc7d08cac6fea3ed6fa3d47463b34e3f2f3bbe86be33688b2f105a`.\n\n## validator.doesRecipientMatch(info, identity)\n\nReturns a boolean indicating whether or not an assertion has\nbeen issued to a particular recipient.\n\n`info` is an object containing properties about the assertion, as returned\nby the `validator` function.\n\n`identity` is an email address. (In the future, identities other than\nemail addresses may be supported.)\n\n# Tests\n\nAll tests can be run with `npm test`.\n\nA code coverage report can be generated with `node_modules/.bin/jake test-cov`\n(or `jake test-cov` if you have [jake][] installed globally)\nand viewed in `cover_html/index.html`.\n\nThe coverage tool used is [node-cover][], see its documentation for details.\n\n[jake]: https://github.com/mde/jake\n[node-cover]: https://github.com/itay/node-cover\n\n# License\n\n[MPL 2.0](http://www.mozilla.org/MPL/2.0/)\n",
  "bugs": {
    "url": "https://github.com/mozilla/openbadges-validator/issues"
  },
  "homepage": "https://github.com/mozilla/openbadges-validator",
  "_id": "openbadges-validator@0.2.4",
  "dist": {
    "shasum": "112782211734d7c24b7c3dfe337a7920ac603707",
    "tarball": "http://registry.npmjs.org/openbadges-validator/-/openbadges-validator-0.2.4.tgz"
  },
  "_from": "openbadges-validator@0.2.4",
  "_npmVersion": "1.3.14",
  "_npmUser": {
    "name": "stenington",
    "email": "mikelarssonftw@gmail.com"
  },
  "maintainers": [
    {
      "name": "brianloveswords",
      "email": "brian@nyhacker.org"
    },
    {
      "name": "stenington",
      "email": "stenington@gmail.com"
    }
  ],
  "_shasum": "112782211734d7c24b7c3dfe337a7920ac603707",
  "_resolved": "https://registry.npmjs.org/openbadges-validator/-/openbadges-validator-0.2.4.tgz"
}
