{
  "name": "continuation-local-storage-glue",
  "version": "0.2.0",
  "description": "https://github.com/joyent/node/issues/5243 used for domains",
  "main": "bootstrap.js",
  "scripts": {
    "test": "tap test/*.tap.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/othiym23/node-continuation-local-storage-glue.git"
  },
  "keywords": [
    "threading",
    "shared",
    "context",
    "domains",
    "tracing",
    "loggin",
    "unsafe"
  ],
  "author": {
    "name": "Forrest L Norvell",
    "email": "ogd@aoaioxxysz.net"
  },
  "license": "BSD",
  "devDependencies": {
    "tap": "~0.4.3"
  },
  "dependencies": {
    "continuation-local-storage": "~1.1",
    "shimmer": "0.7.x"
  },
  "readme": "## INTRODUCTION\n\nThis module has two primary goals:\n\n1. To add the `node-local-context` namespace API to a Node process at runtime.\n2. To rebuild the built-in Node domains behavior to use the namespace system.\n\nDoing this requires some fairly invasive modification of the main Node event\nloop. While the Node event loop's external behavior has remained relatively\nstable over time (barring the odd addition like `setImmediate()`), the\ninternal implementation has been reworked considerably between major versions\nof Node. In particular, while the domains module was introduced in Node 0.8,\nthe core team put considerable attention into making the performance impact of\ndomains as small as possible in 0.10.\n\nBecause this module is intended as a prototype for changes to be made to Node\ncore itself, and because of the differences between these implementations,\nthis module is only intended for use with Node 0.10.x (no earlier, no later).\nIt's possible that it could be made to work with 0.8, and it's also possible\nthat it could be made to work with even earlier versions. A lot of things are\npossible. However, you're on your own.\n\n## node.js monkeypatching notes\n\nIn Node 0.10, for sound performance-related reasons, Trevor Norris split apart\nthe way the event loops works for cases in which domains are or are not in\nuse. This split extends all the way from the JavaScript side through to the\nC++ bindings for Node in V8-land. The changes mostly affect how callbacks are\nset up to be evaluated in subsequent turns of the event loop when using\nprocess.nextTick.\n\nThis process is bootstrapped in\n[node.js](https://github.com/joyent/node/blob/master/src/node.js) (from now\non, assume that when I mention `node.js`, I'm referring to the file, not the\nplatform as a whole). node.js handles the bootstrapping process of connecting\nnative (C++) bits of Node functionality to the JS module system, as well as\nesentially monkeypatching the Node runtime into existence â€“ setting up the\n`process` global, starting the event loop, and defining how the event loop is\nrun.\n\nFortunately for readability (and comprehensibility) the bootstrap process\nis broken down into functions, and everything we care about is in\n[startup.processNextTick()](https://github.com/joyent/node/blob/v0.10/src/node.js#L318-L510).\n\nUnfortunately, there's still a lot to take in in this function, and still more\nunfortunately, it creates a closure around most of the state that its enclosed\nfunctions use, which means that modifying small aspects of the system's\nbehavior is difficult *(if not impossible? figuring this out is WIP)* without\ncompletely replacing the whole shebang. Just to be explicit, this essentially\nimplies that `node-local-context` might end up replacing the entire JS side of\nthe event loop -- minimizing the footprint of the module is one of the current\nmajor goals.\n\nHere are the functions that are most important to understanding what's going\non:\n\n* [_tickDomainCallback (JS)](https://github.com/joyent/node/blob/v0.10/src/node.js#L318-L510)\n* [_nextDomainTick (JS)](https://github.com/joyent/node/blob/v0.10/src/node.js#L493-L510)\n* [_needTickCallback (C++)](https://github.com/joyent/node/blob/v0.10/src/node.cc#L212-L216)\n\nThere is a buuuuunch of stuff to be understood about what's going on with\nthese functions, but until I have all the details straight for this module,\nI'm going to leave it at saying there's a considerable degree of complexity\naround dealing with the \"infobox\", a cute hack that Trevor added to make\ngetting at the current state of the event loop as fast as possible from both\nthe JS and C++ sides of Node. This state exists mostly to make dealing with\nprocess.nextTick as simple and fast as possible, but as a consequence of its\ndesign, the infobox makes it very difficult to selectively monkeypatch any of\nthe bits of Node event loop behavior. To be fair, nobody would have guessed\nthat anyone would be crazy enough to want to do this back when Trevor was\noriginally doing this work.\n\nThis gets a lot of documentation because `process.nextTick` gets used\n*everywhere* and is on a *very hot path*. Breaking it breaks pretty much all\nof Node. Minimizing the footprint here is important not just for this module,\nbut for the eventual changes to Node itself.\n\n## timers.js notes\n\nThe other primary mechanism for propagating state across turns of the event\nloop are the functions defined in `timers.js`. Each one of these deals with\ndomains presently, so each needs to be modified to work with namespaces\ninstead of domains. They're relatively straightforward (at least compared to\nprocess.nextTick), but there are weird subtleties (i.e. it's not sufficient to\njust monkeypatch one of the module functions *or* the version defined on the\nglobal object, you have to do *both* -- considering that almost nothing uses\nthe timers module directly, I don't know why this is. Again, this stuff wasn't\nmeant to be modified at runtime). Also, there's a bunch of linked lists and\nother state that's local to the timers module, so monkeypatching these\nfunctions is again tantamount to replacing them.\n\n## EventEmitter / stream / I/O notes\n\nThe final case in which domains need to be propagated is in the case of\nEventEmitters. If an EE is created on (or added to) a domain, it has a\nproperty containing that domain. So those prototypal methods need to be\noverwritten. There's probably some post-bootstrap cleanup to be done on e.g.\nstdio, but I haven't gotten around to cleaning that up yet, and I'm not sure\nhow many of these corner cases need to be handled for a POC.\n\n## reading as opposed to setting / manipulating domains\n\nThere's a whole bunch of places where everything expects to see a domain\nexposed:\n\n* process.domain\n* domain.active\n* on EEs\n\nContexts (as created by `node-local-context`) look roughly like domains, but\nthey have different behavior in certain circumstances, and they need to be\nshimmed to behave the same way -- the semantics of domains must not change as\na side effect of this module. This is all TODO once the basic APIs are working\nand the best way to modularize the way e.g. nesting behavior has been\nprototyped a little more extensively.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/othiym23/node-continuation-local-storage-glue/issues"
  },
  "_id": "continuation-local-storage-glue@0.2.0",
  "_from": "continuation-local-storage-glue@0.2.0"
}
